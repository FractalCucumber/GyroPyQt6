import pyqtgraph.examples
# pyqtgraph.examples.run()
from time import time
import os
import numpy as np
import re, sys
# from numba import jit, prange, njit
# import multiprocessing as mp
# h=2.2
# h=np.int32(h)
# print(h)
# print(np.dtype(h))
# print(type(h))
# print(sys.getsizeof(h))
# g= 5
# print(sys.getsizeof(g))
# hh = np.array([2, 2])
# hh.resize(1)
# hh.resize(3)
# print(hh)
# exit(0)
# from multiprocessing import Pool, TimeoutError, current_process
# import time, os

# def worker(x):
#     print('WORKER() => ', current_process().name)
#     return x*x

# if __name__ == '__main__':
#     # запуск 4 рабочих процессов
#     with Pool(processes=4) as pool:
#         # результаты получим в 
#         # порядке поступления задач
#         res = pool.map(worker, range(4))
#         print(res)

#         # результаты получим в порядке их 
#         # готовности (могут быть не по порядку)
#         for i in pool.imap_unordered(worker, range(4)):
#             print(i, end=', ')
#         print()
        
#         # вычислит "worker(20)" асинхронно
#         # запустится только один процесс
#         res = pool.apply_async(worker, (20,))
#         # получение результата 
#         async_worker = res.get(timeout=1)
#         print('1 процесс, worker(20) => ', async_worker)

#         # вычислит "os.getpid()" асинхронно
#         # запустится только один процесс
#         res = pool.apply_async(os.getpid, ())
#         # получение результата 
#         async_getpid = res.get(timeout=1)
#         print('1 процесс, os.getpid()  => ', async_getpid)

#         # запуск нескольких асинхронных вычислений 
#         # *может* использовать больше процессов
#         multiple_results = [pool.apply_async(os.getpid, ()) for i in range(4)]
#         # получение асинхронных результатов
#         async_multi = [res.get(timeout=1) for res in multiple_results]
#         print('4 асинхронных процесса, os.getpid():')
#         print(async_multi)

#         # заставим спать один рабочий в течение 10 секунд
#         res = pool.apply_async(time.sleep, (10,))
#         try:
#             # получение результата 
#             res_sleep = res.get(timeout=1)
#             print(res_sleep)
#         except TimeoutError:
#             print("time.sleep(10) => получили multiprocessing.TimeoutError")

#         print("На этот момент пул остается доступным для дополнительной работы")

#     # выход из блока 'with' остановил пул
#     print("Теперь пул закрыт и больше не доступен")

# import pandas as pd
# from multiprocessing import Pool

# # Функция, которая считывает данные из файла
# def read_file(file_path):
#     return pd.read_csv(file_path)

# # Список файлов, которые нужно считать
# file_paths = ['6884_139_6.2_4.txt', '6884_139_6.2_3.txt', '6884_139_6.2_4.txt']

# # Создаем пул процессов
# pool = Pool()
# # print(pool.)
# # Итерируемся по списку файлов и запускаем считывание данных в параллельных процессах
# results = pool.map(read_file, file_paths)

# # Закрываем пул процессов
# pool.close()
# pool.join()

# # Обрабатываем результаты
# for df in results:
#     # Делаем что-то с данными из файла (например, выводим первые 5 строк)
#     print(df.head(5))

# if __name__ == '__main__': # код не работает
#     # Создаем список чисел для вычислений
#     numbers = [1, 2, 3, 4, 5]
    
#     # Создаем пул процессов с максимальным количеством равным количеству ядер процессора
#     # pool = mp.Pool(processes=mp.cpu_count())
#     pool = mp.Pool(processes=5)
    
#     # Запускаем вычисления в каждом процессе и получаем результаты
#     t = time()
#     print(time() - t)
#     results = pool.map(worker, numbers)
    
#     # Закрываем пул процессов
#     pool.close()
#     pool.join()
#     print(time() - t)
    
#     # Выводим результаты
#     for i, num in enumerate(numbers):
#         print(f'Вычисление для числа {num}: {results[i]}')

# if __name__ == '__main__':
#     start1, end1 = 1, 50_000_000
#     start2, end2 = 50_000_001, 100_000_000
#     process1 = mp.Process(target=sum_numbers, args=(start1,end1))
#     process2 = mp.Process(target=sum_numbers, args=(start2,end2))
#     process3 = mp.Process(target=sum_numbers, args=(start2+2,end2+2))
#     process4 = mp.Process(target=sum_numbers, args=(start2+1,end2+1))
#     t = time()
#     process1.start()
#     process2.start()
#     process3.start()
#     process4.start()
#     process1.join()
#     process2.join()
#     process3.join()
#     process4.join()
#     # result1 = process1.result
#     # result2 = process2.returncode
#     print(time() - t)
#     print(mp.cpu_count())
#     # print("Сумма чисел от 1 до 1000000:", result1 + result2)

# exit(0)

# data: bytearray = b"" #bytearray(int.to_bytes(1, length=3, byteorder='big'))
# data += int.to_bytes(1, length=3, byteorder='big')
# data += int.to_bytes(0x27, length=1, byteorder='big')
# print(data)
# print(os.path.splitext('Add.png'))
# i = 3
# while i < 4:
#     print(i)
#     i += 1
# arr = np.array([np.nan, np.nan])
# mylist = []
# mylist.append(arr)
# mylist.append(np.array([1, 55]))
# mylist.append(arr)
# print(mylist)
# print(mylist[1])
# print(mylist[0][0])
# arr = np.array([[2, 4,6], [2, 4, 9]])
# print(arr.shape[0])
# print(arr[:,0])
# f = list(filter(None, re.split("_", os.path.basename("D:\Gyro2023_Git\ddddd_3242_444"))))[0]
# f = list(filter(None, re.split("/", ("D:\Gyro2023_Git\ddddd_3242_444"))))[0]
# file_path = "D:/Gyro2023_Git/ddddd_3242_444"
# print(file_path.split('/')[-1])
# print(f)
# # print(list(filter(None, re.split("_", f[-1])))[0])
# exit(0)
# string = list(filter(None, re.split("_|.txt", "6021_135_4.4_1.txt")))
# path = 'sencors_nums.txt'
# with open(path, 'r') as sensor_list:
#     for sensor_number in sensor_list:
#         # print(sensor_number)
#         check = list(filter(None, re.split("\.|\n", sensor_number)))
#         # print(check)
#         if len(check[-1]) < 3:
#             sensor_number_ = check[-2] + "." + check[-1]
#         if len(check[-1]) == 4:
#             sensor_number_ = check[-1]
#         # print(f"sensor name {sensor_number_}")
#         mypath = '//fs/Projects/АФЧХ/' + sensor_number_
#         logger.info(f"path: {mypath}")
#         onlyfiles = [f for f in os.listdir(mypath) if os.path.isfile(os.path.join(mypath, f))]
#         to_fft = []
#         for file in onlyfiles:
#             string = list(filter(None, re.split("_|_|.txt", file)))
#             # print(re.split("_|.|", "6021_135_4.4_1.txt"))
#             # print(file, string)
#             if len(string) == 4 and string[1] != 'fresh':
#                 to_fft.append(file)
#                 last_str = string
#         logger.info(f"list: {to_fft}")
#         fs = 1000
#         name = last_str[0] + '_' + last_str[1] + '_' +  last_str[2] + f'%_{len(to_fft)}%.txt_FRQ_AMP_dPh_{fs}Hz'
#         # print(last_str)
#         # print(name)
#         name_parts = re.split("\%", name)
#         # print(name_parts)
#         # print(name_parts[0] + name_parts[1] + name_parts[2])
#         # print(name_parts[0] + name_parts[2])
#         # break

# mypath = '//fs/Projects/АФЧХ/6011'
# onlyfiles = [f for f in os.listdir(mypath) if os.path.isfile(os.path.join(mypath, f))]
# # onlyfiles = ['6011_116_8.5_10.txt_FREQ_AMP_dPh_1000Hz.txt'] 
# # print(onlyfiles)
# to_fft = []
# for file in onlyfiles:
#     string = list(filter(None, re.split("_|_|.txt", file)))
#     # print(re.split("_|.|", "6021_135_4.4_1.txt"))
#     # print(len(string), string)
#     if string[1] != 'fresh' and len(string) == 4:
#         to_fft.append(file)
# print(to_fft)
# print(string)
# print("ok")
# print(list(filter(None, re.split("_|.txt", "6011_fresh_3.txt"))))
# print(list(filter(None, re.split("_|.txt", "6011_116_8.5_10.txt_FREQ_AMP_dPh_1000Hz"))))
# exit(0)
rx: bytes = b'\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x27\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x03\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x03\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x27'
rx: bytes = b'\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27'
rx: bytes = b'\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27'
a = np.array((256 ** np.arange(4)[::-1]))
# v = np.ndarray((4, 1), 256 ** np.arange(4)[::-1])  # np.random.normal(size=(4, 1))

b = np.matrix([a, a, a, a])
# print(np.repeat(v, 3, axis=1))
# print(np.repeat(a, 4, axis=0))
# print(np.insert(a,[0+1]*4,a[0],axis=0))
t = time()
package_num = 0
n = 1500
# n = 150000
time_data = np.ndarray((n*200, 5), dtype=np.int32)
for f in range(n):
    bytes_arr = np.frombuffer(rx, dtype=np.uint8)
    start = np.where((bytes_arr[:-13] == 0x72) & (bytes_arr[13:] == 0x27))[0] + 1
    start = start[np.where(np.diff(start) == 14)[0]]
    expand = len(start)
    array_r = np.zeros((expand, 4, 4), dtype=np.uint8)
    for i in range(4):
        for j in range(3):
            array_r[:, i, j] = bytes_arr[np.add(start, 3*i + j)]
    time_data.resize(package_num + expand, 5)
    time_data[package_num:package_num + expand, 0] = np.arange(package_num + 1, expand + package_num + 1)
    time_data[package_num:package_num + expand, 1:] = np.einsum("ijk,jk->ij", array_r, b) / 256
    package_num += expand
print(time() - t)
print(package_num)
# print(time_data)
# print(start)
exit(0)

# @jit(fastmath=True)
# @njit()
def int_from_bytes(rx: bytes, i: int, package_num: int):
    ints = np.array([package_num], dtype=np.int32)
    for shift in [1, 4, 7, 10]:
        res = int.from_bytes(
            rx[(i + shift):(i + shift + 3)],
            byteorder='big', signed=True)
        ints = np.append(ints, res)
    return ints
package_num = 0
# print(len(rx))
t = time()
time_data = np.array([])
time_data = np.resize(
            time_data, (141, 5))
total_num_rows = 0
for f in range(n):
    # package_num = 0
    i = rx.find(0x72)
    ###logger.info(
    ###f"thread_start, i = {i}, len rx = {len(rx)}")
    # start = np.where((rx[:-1] == 0x72) & (rx[1:] == 0x27))[0]
    # после нахождения всех нужных индексов блоками по 3 байта преобразовать массив в числа
    # bytes_array = np.array([byte1, byte2, byte3], dtype=np.uint8)
    # int_value = np.dot(bytes_array, 256 ** np.arange(len(bytes_array))[::-1])
    while (i + 13) < len(rx):
        if not (rx[i] == 0x72 and rx[i + 13] == 0x27):
            ###logger.info(f"before i={i}, 0x72:{rx[i] == 0x72}, 0x27:{rx[i + 13] == 0x27}")
            i += rx[i:].find(0x27) + 1
            ###logger.info(f"now i={i}, 0x72:{rx[i] == 0x72}, 0x27:{rx[i + 13] == 0x27}")
            continue
        time_data[package_num, :] = np.array(
            [int_from_bytes(rx, i, package_num)])
        i += 14
        package_num += 1
        if package_num >= total_num_rows:
            total_num_rows += 1000
            time_data.resize(total_num_rows, 5)
                        # extend_array_size()
print(time() - t)

# @jit(nopython=True)
def extend_array_size(total_num_rows):
    if package_num >= total_num_rows:
        total_num_rows += 1000
        # time_data = np.resize(
        #     time_data, (num_rows, 5))
        time_data.resize(total_num_rows, 5)  # !!!!!

exit(0)

# i = rx.find(0x72) + 1
# bytes_arr = np.frombuffer(rx[i:], dtype=np.uint8)
# start = np.where((bytes_arr[:-1] == 0x27) & (bytes_arr[1:] == 0x72))[0] + 2
# start = np.insert(start, 0, 0)
# print(start)
# rx222: bytes = b'\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27\x72\xFF\xFF\xFF\x00\x00\x02\xFF\xFF\xFF\x00\x02\x09\x27\x72\x07\x02\x0F\x02\x29\x72\x25\x00\x00\x02\x00\x00\x27'
# # rx222: bytes = b'\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00\x05\xFF\xFF\x00\x01\x01\x25\xFF\xFF\xFF\x00\x11\x25\x05\x00\x55\x02\x0F\x02\x01\x21\x25\x00\x00\x02\x00\x00\x00\x55\x00'
 
        
# byte1 = 0b00000000 # 10 в двоичной системе
# byte2 = 0b00000000 # 150 в двоичной системе
# byte3 = 0b11111100 # 108 в двоичной системе
# byte1 = 0x00
# byte2 = 0x34
# byte3 = 0x56
# result = bytes_to_int(byte1, byte2, byte3)
# print(result) # Вывод: 292284
# result = bytes_to_int(rx[0], rx[1], rx[2])
# result = parse_bytes_to_int(rx[0], rx[1], rx[2])
# print(format(result, 'b')) # Вывод: 292284 
# print(bin(result)) # Вывод: 292284 format(decimal_num, 'b')
# a = np.array([[1, 4, 3], [5, 6, 7], [2, 8, 9]])
# print(a)
# # a = np.sort(a, axis=0)
# a = a[a[:, 0].argsort()]
# print(a)
# f = [1, 5, 20, 50]
# amp = [1, 0.9, 0.7, 0.2]
# k_list = np.polyfit(f, amp, 5)
# fun = np.poly1d(k_list)
# # R = np.roots(k_list)
# freq_values = np.linspace(f[0], f[-1], 20)
# amp_approximation = fun(freq_values)
# amp123 = np.abs(amp_approximation - 0.707)
# index = amp123.argmin()
# print(amp_approximation)
# # print(R)
# print(index)
# print(amp_approximation[index])

# print(f := np.deg2rad(f))
# f = np.unwrap(f)
# print(f)


# req("0|[1-9]\\d{0,4}")

# validator = QRegExpValidator(QRegExp("1[0-2]|[1-9]"), self)
# comboBox.setValidator(validator)
# p = np.array([[1, 4, 3], [5, 0, 7]])
# p = np.array([])
# print(p.size)

# print(np.greater(2, 5))
# print(np.greater(7, 5))

# p1 = np.array([1, 2])

# p2 = np.array([2, 4])
# p3 = np.array([2, 3])


from PyQt5 import QtCore
def thread(self): 
    t1=QtCore.QThread(target=Operation) 
    t1.start()
def Operation(self):
    print(1)

# p4 = np.array([p1, p2, p3])
# # p3 = np.array([[p1], [p2]])
# print(p4)
# print(p4[0, :])
# print(p4[:, 1])
###############################################################################
def find_value_between_points(point1, point2, value):
    # Извлечение координат из точек
    x1, y1 = point1
    x2, y2 = point2

    # Формула нахождения значения между точками
    result = y1 + ((y2 - y1) / (x2 - x1)) * (value - x1)

    return result

point1 = (7, 3)
point2 = (8, 5)
value = 6

result = find_value_between_points(point1, point2, value)
# print(result)  # Результат: 5.0
###################################################################################

import sys
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtWidgets import QApplication, QTextEdit, QVBoxLayout, QPushButton, QWidget

class SaveThread(QThread):
    finished = pyqtSignal()

    def __init__(self, data):
        super().__init__()
        self.data = data

    def run(self):
        with open('data.txt', 'w') as file:
            file.write('\n'.join(self.data))
        self.finished.emit()

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.textedit = QTextEdit()
        self.savebtn = QPushButton('Save')
        self.savebtn.clicked.connect(self.saveData)

        layout = QVBoxLayout()
        layout.addWidget(self.textedit)
        layout.addWidget(self.savebtn)
        self.setLayout(layout)

    def saveData(self):
        data = self.textedit.toPlainText().split('\n')
        
        save_thread = SaveThread(data)
        save_thread.finished.connect(self.saveFinished)
        save_thread.start()

    def saveFinished(self):
        print('Data saved successfully.')
        self.savebtn.setEnabled(True)

# if __name__ == '__main__':
#     app = QApplication(sys.argv)
#     window = MainWindow()
#     window.show()
#     sys.exit(app.exec_())